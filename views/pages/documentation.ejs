<% include ../partials/header %>

<div class="row">
    <div class="col-xs-12">
        <h1>Documentation</h1>
    </div>
    <div class="col-md-6">
        <p>
            So far, there isn't much information yet on how to use the game server. In the mean time, you can have a
            look at the live example running at <a href="/learn/">/learn</a>.
        </p>
        <p>
            On this page you can find some rudimentary documentation for the HTTP API. We're currently also developing libraries to compete on our server. If you feel like implementing an AI in you own programming language of choice, you can use this guide for the HTTP calls you'll have to make.
        </p>
        <div class="alert alert-danger">
            <p><strong>Watch out:</strong> this documentation was written before the implementation of the HTTP API. This means that some information might be outdated. Be sure to check whether calls to the API still work. If you run into problems, try using an application such as <a href="https://www.getpostman.com" target="_blank">Postman</a> to make HTTP request and analyse the responses.</p>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h2>User</h2>
    </div>
    <div class="col-md-6">
        <p>
            This section of the API is not currently implemented. This documentation is only written as reference for the development of it. However, this will be usable in the future.
        </p>
        <p>
            Before you can participate on this website in any way, other than viewing, you will have to register as a user. You can use this account to manage your AIs and compete in various competitions.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>POST /user</h3>
    </div>
    <div class="col-md-6">
        <p>
            This route can and should be used for registering a new user.
        </p>
    </div>
    <div class="col-md-6">
        <h4>Request</h4>
<pre>{
    "username": "bobisthebest",
    "password": "secret123",
    "mail": "bob@bobsmail.com"
}</pre>
        <h4>Response</h4>
<pre>{
    "id": 1234,
    "username": "bobisthebest",
    "mail": "bob@bobsmail.com"
}</pre>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>GET /user/1234</h3>
    </div>
    <div class="col-md-6">
        <p>
            Here you can find the information about a certain user. Without authentication only the public information will be visible on this route.
        </p>
    </div>
    <div class="col-md-6">
        <h4>Response</h4>
<pre>{
    "username": "bobisthebest"
}</pre>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>PUT /user/1234 <span class="badge">User Auth</span> <span class="badge">WIP</span></h3>
    </div>
    <div class="col-md-6">
        <p>
            Use this route to update the information of a user. You can provide all fields, or a subset, to update. No matter the number of fields that are updated, all information of the user will always be returned.
        </p>
        <p>
            Keep in mind that the ID of a user cannot be changed.
        </p>
    </div>
    <div class="col-md-6">
        <h4>Request</h4>
<pre>{
    "password": "secret123",
}</pre>
        <h4>Response</h4>
<pre>{
    "username": "bobisthebest",
    "mail": "bob@bobsmail.com"
}</pre>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>DEL /user/1234 <span class="badge">User Auth</span> <span class="badge">WIP</span></h3>
    </div>
    <div class="col-md-6">
        <p>
            We'd be sad to see you go, but if you want, you can always delete your user account easilly. In fact, very easilly, so don't do it accidentally.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h2>Sessions & authentication</h2>
    </div>
    <div class="col-md-6">
        <p>
            This section of the API is not currently implemented. This documentation is only written as reference for the development of it. However, this will be usable in the future.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>Starting a session <small>POST /session</small></h3>
    </div>
    <div class="col-md-6">
        <p>
            Before you can authenticate as a user for API requests, you'll first have to start a session. Basically, this boils down to getting temporary key that gives access to your account. For extra security reasons, this key is then bound to your IP and expires after a certain amount of time of inactivity.
        </p>
        <p>
            Starting a new session will terminate all other open sessions by that user.
        </p>
    </div>
    <div class="col-md-6">
        <h4>Request</h4>
<pre>{
    "username": "bobisthebest",
    "password": "secret123"
}</pre>
        <h4>Response</h4>
<pre>{
    "username": "stef",
    "key": "a3ca717cd1420d66893bce6026cf52ec1dfdf923c1fadeb4feb66bf50f44a99f",
    "ip": "::1",
    "expires": "2018-01-25T13:37:07.230Z"
}</pre>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>Authentication <span class="badge">WIP</span></h3>
    </div>
    <div class="col-md-6">
        <p>
            Some API calls require authentication. These calls are marked with <span class="badge">User Auth</span>, <span class="badge">AI Auth</span> or <span class="badge">User/AI Auth</span> badges if they require user, ai or either user or ai authentication respectively.
        </p>
        <p>
            Authentication is done by using the <code>Authorization</code> HTTP header with your request. As the type you send either <code>user</code> or <code>ai</code> depending on how you wish to authenticate. Your session key is what you should use as your credentials.
        </p>
        <p>
            If you authenticate as AI, there is not really a notion of sessions. You just have to provide the secret key for that AI. This means that AI authentication is less secure than user authentication, but easier. This additional form of authentication is present to allow for easy implementation of a basic client. In the future you'll likely be able to disable AI authentication for your account, if you whish to have the extra security.
        </p>
    </div>
    <div class="col-md-6">
        <h4>Authentication as user</h4>
        <pre>Authorization: user 4fcf7b20…072afcfc</pre>
        <h4>Authentication as AI</h4>
        <pre>Authorization: ai acbdefg123456</pre>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>Ending a session <small>DEL /session/4fcf7b20…072afcfc</small> <span class="badge"> User Auth</span> <span class="badge">WIP</span></h3>
    </div>
    <div class="col-md-6">
        <p>
            You can let a sessions expire automatically, but if you want to be sure that no one has access to your user account, you can also manually terminate a session.
        </p>
    </div>
    <div class="col-md-6">
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h2>AI</h2>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>GET /ai/45</h3>
    </div>
    <div class="col-md-6">
        <p>
            The details of an AI with a given ID.
        </p>
    </div>
    <div class="col-md-6">
        <h4>Response</h4>
        <pre>{
    "name": "Atheros"
}</pre>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>POST /ai</h3>
    </div>
    <div class="col-md-6">
        <p>
            Register a new AI to the server.
        </p>
    </div>
    <div class="col-md-6">
        <h4>Request</h4>
        <pre>{
    "name": "Atheros"
}</pre>
        <h4>Response</h4>
        <pre>{
    "id": 45,
    "name": "Atheros",
    "ai_key": "acbdefg123456"
}</pre>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h2>Game</h2>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>POST /game</h3>
    </div>
    <div class="col-md-6">
        <p>
            Starts a new game. A new game will only be created if no games are in the “waiting” status, otherwise the game will be returned that is waiting.
        </p>
    </div>
    <div class="col-md-6">
        <h4>Request</h4>
        <pre>{
    "ai_id": 45,
    "ai_key": "acbdefg123456"
}</pre>
        <h4>Response</h4>
        <pre>{
	"id": 5836,
	"ai_a": 45,
	"ai_b": null
}</pre>
    </div>

<div class="row">
    <div class="col-xs-12">
        <h3>GET /game/5836</h3>
    </div>
    <div class="col-md-6">
        <p>
            The status of a certain game. This can be, in chronological order, one of the following states:

            <ul>
                <li>Waiting: waiting for the second AI to join the game</li>
                <li>AI A/B turn: it’s to the AI nr. A/B to make a move</li>
                <li>Over: the game is finished because one of the following reasons:
                    <ul>
                    	<li>AI A or B won, in which case an addition “winner” field will be returned</li>
                    	<li>There is a tie (i.e. all the balls are inserted, but there is no AI with 4 in a row)</li>
                    	<li>Interrupted: one of the AIs gave up, or the game was timed out (the period for this should still be determined)</li>
                    </ul>
                </li>
            </ul>
        </p>
    </div>
    <div class="col-md-6">
        <h4>Response</h4>
        <pre>{
    "id": 5836,
    "status_code": 1,
    "status_message": "Waiting",
    "ai_a": 45,
    "ai_b": null,
    "started": "Wed Jan 24 2018 18:19:04 GMT+0100 (CET)"
}</pre>
        <p>or:</p>
        <pre>{
    "id": 5836,
    "status_code": 2,
    "status_message": "In progress",
    "ai_a": 45,
    "ai_b": 53,
    "ai_turn": 45,
    "moves_passed": 13,
    "started": "Wed Jan 24 2018 18:19:04 GMT+0100 (CET)"
}</pre>
        <p>or:</p>
        <pre>{
    "id": 5836,
    "status_code": 3,
    "status_message": "Over",
    "over_reason_code": 1,
    "over_reason_message": "Won",
    "ai_a": 45,
    "ai_b": 53,
    "ai_winner": 53,
    "moves_passed": 34,
    "started": "Wed Jan 24 2018 18:19:04 GMT+0100 (CET)",
    "ended": "Wed Jan 24 2018 18:22:56 GMT+0100 (CET)"
}</pre>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h3>POST /game/5836</h3>
    </div>
    <div class="col-md-6">
        <p>
            Do a move on a certain game. Might give an error if the move is:
            <ul>
                <li>Invalid: the ball can not be inserted on the specified place, maybe because there are already 4 balls there, or the coordinates are invalid</li>
                <li>Not to move: it wasn’t the AIs turn to place a ball</li>
            </ul>
        </p>
    </div>
    <div class="col-md-6">
        <h4>Request</h4>
        <pre>{
    "ai_id": 45,
    "ai_key": "acbdefg123456",
    "position": 4
}</pre>
        <h4>Response</h4>
        <pre>{
    "id": 5836,
    "status_code": 2,
    "status_message": "In progress",
    "ai_a": 45,
    "ai_b": 53,
    "ai_turn": 53,
    "moves_passed": 1,
    "started": "Wed Jan 24 2018 18:19:04 GMT+0100 (CET)"
}</pre>
        <p>or:</p>
        <pre>{
    "error_code": 1,
    "error_message": "Invalid move"
}</pre>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <h2>Errors</h2>
    </div>
    <div class="col-md-6">
        <p>
            This is a list of all errors the server can return. This is always updated to the lastest version of the code.
        </p>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nr.</th>
                    <th>Status code</th>
                    <th>Message</th>
                </tr>
            </thead>
            <%
            var error_code = 0
            for (let error of errors) {
                error_code++ %>

                <tr>
                    <td><%= error_code %></td>
                    <td><%= error.status %></td>
                    <td><%= error.message %></td>
                </tr>

            <% } %>
        </table>
    </div>
</div>


<% include ../partials/footer %>
